# -*- coding: utf-8 -*-
"""7_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IuXpD96emjARETi9i3Itrl_7FyWdVYud

#**INTEGRANTES**



*   Casanova, Beverly
*   Nuñez, Lourdes
*   Cardozo, Pamela

#FRAUDES FINANCIEROS

En el presente trabajo se hace un análisis sobre un tema de gran relevancia en el mundo financiero: el fraude con tarjetas de crédito. Este fenómeno, que
afecta tanto a consumidores como a instituciones financieras, ha cobrado
importancia debido al aumento de las transacciones electrónicas y al uso generalizado de tarjetas de crédito.

Nuestro análisis se basa en un conjunto de datos detallado que recoge diversas transacciones con tarjetas de crédito, clasificadas según si son fraudulentas o no. Este dataset proporciona una oportunidad única para explorar los patrones y características que distinguen a las transacciones legítimas de las fraudulentas.

Este proyecto no solo busca identificar transacciones fraudulentas de manera eficiente, sino también proporcionar herramientas y conocimientos que pueden ser aplicados en contextos similares de detección de fraudes.






## Objetivos del proyecto

*   Detectar patrones en fraudes considerenado hora del dia , categoria y lugar.
*   Elemento de la lista.


## Origen del Dataset

Debido a que la mayoría de los Dataset de Argentina son incompletos,con pocos datos y en su mayoría privados, elegimos un Dataset Internacional, y simularemos que es un banco de Argentina.
Proporcionamos el link de nuestro Dataset: https://www.kaggle.com/datasets/kelvinkelue/credit-card-fraud-prediction

# CARGAMOS LIBRERÍAS A UTILIZAR
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
# %matplotlib inline

from google.colab import drive #importar
drive.mount('/content/drive')

"""**REALIZAMOS LA LECTURA DE NUESTRA BASE DE DATOS**"""

# Leemos el archivo csv
credit_card_fraud = pd.read_csv('/content/drive/My Drive/Curso Ingenias/fraud_test.csv', delimiter=',',index_col=0)

"""# DETALLES DE LA BASE DE DATOS

---





"""

#Visualizamos el dataframe
credit_card_fraud.head()

# Se observa cuantas filas y columnas tiene
print("\nEl dataframe tiene {} filas y {} columnas.".format(credit_card_fraud.shape[0], credit_card_fraud.shape[1]))

# Obtener información general del conjunto de datos
print("\nInformación general del conjunto de datos:")
print(credit_card_fraud.info())

"""# COLUMNAS

**`Descripción de las Variables`**
* **Trans_date_trans_time**: Marca de tiempo de la transacción (fecha y hora).
* **Cc_num**: Número de identificación único del cliente.
* **Merchant**: El comerciante involucrado en la transacción.
* **Category**: Tipo de transacción (por ejemplo, personal, cuidado de niños).
* **Amt**: Monto de la transacción.
* **First**: Nombre del titular de la tarjeta.
* **Last**: Apellido del titular de la tarjeta.
* **Gender**: Género del titular de la tarjeta.
* **Street**: Dirección del titular de la tarjeta.
* **City**: Ciudad de residencia del titular de la tarjeta.
* **State**: Estado de residencia del titular de la tarjeta.
* **Zip**: Código postal del titular de la tarjeta.
* **Lat**: Latitud de la ubicación del titular de la tarjeta.
* **Long**: Longitud de la ubicación del titular de la tarjeta.
* **City_pop**: Población de la ciudad del titular de la tarjeta.
* **Job**: Título del trabajo del titular de la tarjeta.
* **Dob**: Fecha de nacimiento del titular de la tarjeta.
* **Trans_num**: Identificador único de la transacción.
* **Unix_time**: Marca de tiempo de la transacción (formato Unix).
* Merch_lat: Ubicación del comerciante (latitud).
* Merch_long: Ubicación del comerciante (longitud).
* Is_fraud: Indicador de transacción fraudulenta (1 = fraude, 0 = legítima). Esta es la variable objetivo para propósitos de clasificación.
"""

# Visualizamos las columnas
credit_card_fraud.columns

# Para facilitar nuestro dataset , se renombran las columnnas de ingles a español .
# Diccionario de mapeo de nombres en inglés a español
columnas_renombradas = {
    'trans_date_trans_time': 'fecha_transaccion',
    'cc_num': 'num_tarjeta',
    'merchant': 'comerciante',
    'category': 'categoria',
    'amt': 'monto',
    'first': 'nombre',
    'last': 'apellido',
    'gender': 'genero',
    'street': 'calle',
    'city': 'ciudad',
    'state': 'estado',
    'zip': 'codigo_postal',
    'lat': 'latitud',
    'long': 'longitud',
    'city_pop': 'poblacion_ciudad',
    'job': 'trabajo',
    'dob': 'fecha_nacimiento',
    'trans_num': 'num_transaccion',
    'unix_time': 'tiempo_unix',
    'merch_lat': 'latitud_comerciante',
    'merch_long': 'longitud_comerciante',
    'is_fraud': 'es_fraude'
}

# Renombrar las columnas
credit_card_fraud.rename(columns=columnas_renombradas, inplace=True)

# Mostrar los nuevos nombres de las columnas
print("Columnas renombradas:", credit_card_fraud.columns)

# Visualizamos el dataset para ver el cambio de columnas renombradas.
credit_card_fraud.head()

# Se muestra el tipo de dato de cada columna.
credit_card_fraud.dtypes

"""Se demuestra que cada columna coincide con su tipo de dato

**Cualitativas (Categóricas):**
fecha_transaccion, comerciante, categoria, nombre, apellido, genero, calle, ciudad, estado, trabajo, fecha_nacimiento, num_transaccion.

**Cuantitativas (Numéricas):**

**Discretas:** codigo_postal, poblacion_ciudad, es_fraude.

**Continuas:** num_tarjeta, monto, latitud, longitud, tiempo_unix, latitud_comerciante, longitud_comerciante.

****

**`DETALLES DE LAS COLUMNAS`**
"""

# Se procede a ver si hay datos nulos.
credit_card_fraud.isnull().sum()

"""Se observa que no hay valores nulos en las columnas del Dataset, esto implica que los datos estan completos en todas las columnas lo cual es fundamental para los siguientes análisis.

**`COLUMNAS FECHA Y HORA`**

Se crean columnas nuevas para tener la fecha y hora separadas.
"""

credit_card_fraud['trans_fecha'] = pd.to_datetime(credit_card_fraud['fecha_transaccion']).dt.date
credit_card_fraud['trans_hora'] = pd.to_datetime(credit_card_fraud['fecha_transaccion']).dt.hour

# Verificar las nuevas columnas
credit_card_fraud.head()

"""**`COLUMNA EDAD`**

Se creo una columna edad que muestra la edad del cliente
"""

credit_card_fraud['fecha_nacimiento'] = pd.to_datetime(credit_card_fraud['fecha_nacimiento'])
credit_card_fraud['trans_fecha'] = pd.to_datetime(credit_card_fraud['trans_fecha'])
credit_card_fraud['edad_cliente'] = credit_card_fraud['trans_fecha'].dt.year - credit_card_fraud['fecha_nacimiento'].dt.year

# renombramos la columna de inglés a español
categorias_renombradas = {
    'gas_transport': 'gasolina_transporte',
    'grocery_pos': 'supermercado',
    'home': 'hogar',
    'shopping_pos': 'compras',
    'kids_pets': 'niños_mascotas',
    'shopping_net': 'compras_en_linea',
    'entertainment': 'entretenimiento',
    'personal_care': 'cuidado_personal',
    'food_dining': 'comida',
    'health_fitness': 'salud_ejercicio',
    'misc_pos': 'varios',
    'misc_net': 'varios_en_linea',
    'grocery_net': 'supermercado_en_linea',
    'travel': 'viajes'
}

# Renombrar la columna
credit_card_fraud['categoria'] = credit_card_fraud['categoria'].replace(categorias_renombradas)
credit_card_fraud['categoria'].value_counts()

"""**`COLUMNA GÉNERO`**"""

credit_card_fraud['genero'].value_counts()

"""# DETALLES ESTADÍSTICOS"""

credit_card_fraud.describe()

"""El análisis estadístico de las transacciones de tarjetas de crédito muestra lo siguiente:

Se procesaron un total de 555.719 transacciones. El monto promedio de las transacciones es `$69,99`, con una desviación estándar de `$156.75`, un mínimo de `$1.00` y un máximo de `$22,768.11`.

Las ciudades donde se realizaron las transacciones tienen una población media de 88.221 habitantes, con una desviación estándar de 303.909, un mínimo de 23 y un máximo de 2.906.700 habitantes. El tiempo Unix promedio de las transacciones es 1.38e+09, con una desviación estándar de 5.20e+06.

Finalmente, la proporción de transacciones fraudulentas es muy baja, con una media de 0.00386 y una desviación estándar de 0.062, variando entre 0 (no fraude) y 1 (fraude).

# GRÁFICOS DE ANÁLISIS

**`FRAUDE`**
"""

fraud = credit_card_fraud[credit_card_fraud['es_fraude'] == 1]

# Filtrar el DataFrame para seleccionar solo las filas donde isFraud es 1
transacciones_fraudulentas =fraud[credit_card_fraud['es_fraude'] == 1]

# Mostrar detalles de las transacciones fraudulentas
print("Detalles de las transacciones fraudulentas:")
print(transacciones_fraudulentas.head())

plt.figure(figsize=(6, 6))
credit_card_fraud['es_fraude'].value_counts().plot.pie(autopct = '%.1f%%',colors = ['green', 'red'], startangle=90)
plt.title('Porcentaje del Fraude')

"""El gráfico pastel nos proporciona una visualización rápida de la proporción de fraudes en el conjunto de datos confirmando que las transacciones fraudulentas (en rojo) representan una pequeña fracción del total."""

# Comparación de montos en transacciones fraudulentas y no fraudulentas
plt.figure(figsize=(10, 6))
sns.boxplot(x='es_fraude', y='monto', data=credit_card_fraud)
plt.title('Montos de Transacciones Fraudulentas y No Fraudulentas')
plt.show()

"""Este gráfico de caja muestra la distribución de los montos de transacciones de tarjetas de crédito, comparando las transacciones fraudulentas (es_fraude = 1) con las no fraudulentas (es_fraude = 0). Los fraudes en tarjetas de crédito tienden a implicar montos más altos en comparación con las transacciones legítimas, lo que puede ser una indicación útil para la detección de fraudes. Además, la dispersión de los montos en las transacciones fraudulentas es mayor, indicando una mayor variabilidad en el valor de estas transacciones."""

# Calculamos la frecuencia de cada categoría
category_counts = transacciones_fraudulentas['categoria'].value_counts()

# Ordenar las categorías por frecuencia
category_counts = category_counts.sort_values(ascending=True)

# Crear un gráfico de barras horizontales
plt.figure(figsize=(10, 6))  # Establecer el tamaño de la figura
sns.barplot(x=category_counts.values, y=category_counts.index, palette='pastel', hue=category_counts.index, dodge=False, legend=False)

# Establecer etiquetas y título
plt.xlabel('Frecuencia')
plt.ylabel('Categoría')
plt.title('Clasificación de Fraudes según sus Categorías')

# Mostrar el gráfico
plt.show()

"""Las categorías se ordenan de manera ascendente por frecuencia, mostrando la diversidad de categorías en las transacciones. Este grafico muestra el contexto de cada transacción facilitando el análisis detallado de patrones de fraude enfocado en las categorías mas frecuentes.

**`PORCENTAJE POR GÉNERO`**
"""

fraud_percentage = transacciones_fraudulentas['genero'].value_counts(normalize=True) * 100

#tabla nueva
percentage_df = fraud_percentage.reset_index()
percentage_df.columns = ['genero', 'percentage']
# Crear un gráfico de barras
plt.figure(figsize=(8, 6))
sns.barplot(x='genero', y='percentage', data=percentage_df)
sns.despine()
# Etiquetas y título
plt.xlabel('Género')
plt.ylabel('Porcentaje de Fraudes')
plt.title('Porcentaje de Fraudes por Género')

# Añadir porcentajes encima de las barras
for index, row in percentage_df.iterrows():
    plt.text(index, row['percentage'] + 0.5, f'{row["percentage"]:.1f}%', ha='center', color='black', fontsize=10)

# Mostrar el gráfico
plt.show()

"""Visualizamos por género las transacciones fraudulentas."""

# Crear el gráfico de dispersión
plt.figure(figsize=(15, 9))
sns.scatterplot(x='edad_cliente', y='monto', data=transacciones_fraudulentas,hue="categoria")
# Agregar etiquetas y título
plt.xlabel("Edad")
plt.ylabel("Monto")
plt.title(" Transacciones de fraude")
plt.legend([],[], frameon=False)
# Mostrar el gráfico
plt.show()

"""Como no se ve una distincion en el grafico segun categoria se realizo otro grafico para ver cada categoria"""

# Crear el gráfico de dispersión
plt.figure(figsize=(3, 2))
g = sns.FacetGrid(data=transacciones_fraudulentas, col="categoria", col_wrap=3)
g.map_dataframe(sns.scatterplot, x='edad_cliente', y='monto')  # Use 'Edad' instead of 'edad'

# Agregar etiquetas y título
g.set_axis_labels('Edad (años)', 'Monto')
g.set_titles('{col_name}')

# Mostrar el gráfico
plt.show()

"""**DISTRIBUCIÓN DE LAS TRANSACCIONES DE FRAUDE**"""

plt.figure(figsize=(10, 6))  # Ajustar el tamaño de la figura

sns.boxplot(x='estado',y='monto', data=transacciones_fraudulentas,width=0.5)
plt.xticks(rotation=45)
plt.xlabel("Estado")
plt.ylabel("Transaccion")
plt.title("Distribución de las transacciones de fraude")
plt.show()

"""**GRÁFICO : HORA POR FRAUDE**"""

plt.figure(figsize=(12, 8))
sns.set_theme(style="darkgrid")
sns.displot(
    transacciones_fraudulentas, x="trans_hora", col="categoria", row="genero",
    binwidth=3, height=3, facet_kws=dict(margin_titles=True),
)
plt.ylabel("Cantidad")
plt.title("Hora segun genero y categoria")
plt.show()

"""**SCATTER PLOT**"""

plt.figure(figsize=(12, 8))  # Ajustar el tamaño de la fig

credit_card_fraud['fecha_transaccion'] = pd.to_datetime(credit_card_fraud['fecha_transaccion'],dayfirst=True)

sns.scatterplot(x='fecha_transaccion', y='monto', data=credit_card_fraud, color='#6b5b95', alpha=0.6)  # Ajustar el color y la transparencia
plt.xlabel('Fecha de la transacción')
plt.ylabel('Monto de la transacción')
plt.title('Gráfico de Dispersión: Monto de Transacción vs. Fecha')
plt.grid(True)  # Agregar una cuadrícula de fondo
plt.tight_layout()  # Ajustar el diseño para evitar solapamientos
plt.xticks(rotation=45)  # Rotar las etiquetas del eje x
plt.show()

"""Los puntos del gráfico muestran cómo varían los montos de las transacciones a lo largo del tiempo. Aquí vemos una visión clara de cómo los montos de las transacciones varían con el tiempo, lo que puede ser útil para identificar tendencias, picos de actividad y posibles anomalías en los datos de transacciones de tarjetas de crédito.

**FRECUENCIA DE LAS TRANSACCIONES**
"""

plt.figure(figsize=(14, 5))  # Ajustar el tamaño global de la figura

plt.subplot(1, 3, 1)  # 1 fila, 3 columnas, primer subgráfico
sns.histplot(fraud["monto"], color="#a8685e", kde=True)
plt.xlabel('Monto de la transaccion')
plt.ylabel('Frecuencia')
plt.title('Frencuancia de las transacciones')
sns.despine()

"""El histograma muestra la frecuencia de transacciones fraudulentas en diferentes rangos de montos.

La mayoría de las transacciones fraudulentas se agrupan en los rangos más bajos de montos, mientras que las transacciones de montos elevados son menos frecuentes.

La curva de densidad proporciona una visualización suave de la distribución de los montos, destacando picos y caídas en la frecuencia de las transacciones fraudulentas.

**GRÁFICO DE CORRELACIÓN**
"""

# Seleccionar solo las columnas numéricas
numeric_columns = credit_card_fraud.select_dtypes(include=['number']).columns

# Calcular la matriz de correlación
correlation_matrix = credit_card_fraud[numeric_columns].corr()

# Visualizar la matriz de correlación
plt.figure(figsize=(14, 12))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, linecolor='black')
plt.title('Matriz de Correlación', fontsize=16)
plt.xticks(rotation=45, ha='right', fontsize=12)
plt.yticks(fontsize=12)
plt.tight_layout()
plt.show()

# !pip install plotly requests

import plotly.express as px
import requests

# URL de un archivo GeoJSON de EE.UU.
geojson_url = 'https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json'

# Descargar el archivo GeoJSON
response = requests.get(geojson_url)
geojson = response.json()


# Crear un gráfico de dispersión geográfico utilizando Plotly
fig = px.scatter_geo(
    credit_card_fraud,
    lat='latitud',  # latitud del titular de la tarjeta
    lon='longitud',  # longitud del titular de la tarjeta
    color='es_fraude',  # variable que indica si es fraude o no
    hover_data=['latitud_comerciante', 'longitud_comerciante'],  # Ajusta según sea necesario.
    title='Ubicación de Fraudes por Latitud y Longitud de Titular en Estados Unidos'
)

# Eliminar la leyenda de colores
fig.update_layout(coloraxis_showscale=False)

# Configuración del mapa para centrarse en Estados Unidos
fig.update_geos(
    scope="usa",
    showcountries=True,
    countrycolor="RebeccaPurple"
)

fig.show()

"""Este gráfico de dispersión geográfico muestra la ubicación de las transacciones de tarjetas de crédito en los Estados Unidos, destacando las transacciones fraudulentas en comparación con las no fraudulentas. Cada punto en el mapa representa una transacción, con las coordenadas de latitud y longitud del titular de la tarjeta.

**Eliminar columnas**
"""

credit_card_fraud.drop(columns=['num_transaccion','num_tarjeta','comerciante','nombre','apellido','calle','codigo_postal','tiempo_unix'],axis=1,inplace=True)

"""**Guardar Los cambios del Dataset**"""

arch='/content/drive/My Drive/Curso Ingenias/fraud_credit.csv'
credit_card_fraud.to_csv(arch, sep=',', index=False, encoding='utf-8')

"""# **CONCLUSIÓN**

Se a explorado un conjunto de datos detallado que contiene transacciones de tarjetas de crédito, diferenciadas entre legítimas y fraudulentas. Nuestro análisis se centró en identificar patrones y características distintivas que pueden ayudar en la detección eficiente de fraudes. Observamos que los fraudes, aunque representan una pequeña fracción del total de transacciones, tienden a involucrar montos más altos y muestran variabilidad en términos de categorías y horarios.

Este proyecto no solo busca la identificación de transacciones fraudulentas, sino también proporcionar herramientas y conocimientos que pueden aplicarse en contextos similares de detección de fraudes. Utilizamos herramientas como gráficos de dispersión, histogramas y análisis de correlación para profundizar en los datos y obtener insights valiosos.

En resumen, este estudio proporciona una visión integral sobre cómo los patrones en las transacciones fraudulentas pueden ser identificados y utilizados para mejorar las estrategias de detección y prevención de fraudes en el ámbito financiero.
"""